""" QUESTION
Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.
A subarray is a contiguous part of an array.
Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.

Input: nums = [1]
Output: 1

Input: nums = [5,4,-1,7,8]
Output: 23

Constraints:
1 <= nums.length <= 105
-104 <= nums[i] <= 104


SOLUTION
""""

class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        n=len(nums)
        overallBest = nums[0]
        currentBest = 0
        for i in range(0, n):
            currentBest = currentBest + nums[i]
            if (overallBest < currentBest):
                overallBest = currentBest
            if currentBest < 0:
                currentBest = 0
        return overallBest

# END
